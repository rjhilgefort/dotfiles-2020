# reloads
alias reload="exec $SHELL -l"
alias reload-compton='killall -USR1 compton'

# display manager
# https://askubuntu.com/questions/829108/what-is-gdm3-kdm-lightdm-how-to-install-and-remove-them
# lightdm, gdm, gdm3
alias display-manager-list="cat /etc/X11/default-display-manager"
alias display-manager-configure="sudo dpkg-reconfigure lightdm" # prompts UI, so doesn't matter which you pick here
alias display-manager-restart='sudo systemctl restart lightdm'

# tig
alias t="tig status"

# keyboard disablers
# alias kbd-disable="kbd-internal-disable"
# alias kbd-enable="kbd-internal-enable"

# yabai / skhd
alias yabai-restart="yabai --restart-service && skhd --restart-service"

# emacs
alias emacs-term="emacs -nw"
alias emacs-bg="emacs &"
alias em="emacs-term"
alias vime="emacs-term"

# see what apps are currently using the network
alias appsoninternet='sudo lsof -P -i -n | cut -f 1 -d " " | uniq'

# list what ports are currently open
alias listopenports='sudo lsof -i -P | grep -i "listen"'
function killopenport {
    kill $(lsof -ti tcp:$1)
}

alias timezone-mountain="timedatectl set-timezone America/Denver"
alias timezone-eastern="timedatectl set-timezone America/Kentucky/Louisville"

alias network-restart="sudo systemctl restart NetworkManager"
alias keyboard-key-repeat="xset r rate 150 50"

# Do this if you install a new nvidia driver?
alias grub-update="sudo grub-mkconfig -o /boot/grub/grub.cfg"

alias xclip="xclip -selection c"

# General
alias cl="clear"
alias g="git"

# Homebrew
alias b="brew"
alias bs="brew search"
alias bi="brew install"

# NPM / Yarn
alias n="npm"
alias ni="npm install"
alias nis="npm install --save"
alias nisd="npm install --save-dev"
alias nr="npm run"
alias y="yarn"
alias yi="yarn install"
alias ya="yarn add"
alias yad="yarn add --dev"

# docker
alias d='docker'
alias d-containers-stop-all='docker stop $(docker ps -a -q)'
alias d-containers-remove-all='docker rm $(docker ps -a -q)'
alias d-images-remove-all='docker rmi $(docker images -q)'
alias d-volume-remove-all='docker volume rm $(docker volume ls -qf dangling=true)'
alias d-network-remove-all='docker network rm $(docker network ls -q)'
d-exec() { docker exec -it $1 bash; }

# docker-compose
alias dc='docker-compose'

# ranger
alias r='ranger'

# pm2
alias pm='pm2'

# gitconfig switching
alias git-whoami='echo $(git config user.email)'

# Editor ApplePressAndHoldEnabled
alias code-press-and-hold='defaults write com.microsoft.VSCode ApplePressAndHoldEnabled -bool false'
cursor-press-and-hold() {
  defaults write "$(osascript -e 'id of app "Cursor"')" ApplePressAndHoldEnabled -bool false
}

# https://cht.sh
cheat() {
  curl cht.sh/$1
}

# tere
# https://github.com/mgunyho/tere
# local result=$(/Users/rhilgefort/.cargo/bin/tere "$@")
# [ -n "$result" ] && cd -- "$result"
tere() {
  local result=$(command tere "$@")
  [ -n "$result" ] && cd -- "$result"
}
alias td="tere"

# Weather
alias weather="curl wttr.in/Evergreen+Colorado\?u"
alias weather-v2="curl v2.wttr.in/Evergreen+Colorado\?u"
alias weather-v3="curl v3.wttr.in/Evergreen+Colorado\?u"

################################################################################
# fzf
# https://github.com/junegunn/fzf/wiki/examples
################################################################################


################################################################################
# Splunk K8
################################################################################
alias incbot-db-backup="rm -f fetchedDatabase.json; kubectl get pods --namespace incident-response-bot | sed -ne 's/\(incident-response-bot-[0-9a-zA-Z-]*\).*/\1/p' | xargs -I{} kubectl exec -n incident-response-bot {} -- cat /data/pseudoDatabase.json > fetchedDatabase.json && tail fetchedDatabase.json"
alias incbot-db-backup-backup="rm -f fetchedDatabase-backup.json; kubectl get pods --namespace incident-response-bot | sed -ne 's/\(incident-response-bot-[0-9a-zA-Z-]*\).*/\1/p' | xargs -I{} kubectl exec -n incident-response-bot {} -- cat /data/pseudoDatabase_backup.json > fetchedDatabase-backup.json && tail fetchedDatabase-backup.json"
alias incbot-test-db-backup="rm -f fetchedDatabase-test.json; kubectl get pods --namespace incident-response-bot-test | sed -ne 's/\(incident-response-bot-[0-9a-zA-Z-]*\).*/\1/p' | xargs -I{} kubectl exec -n incident-response-bot-test {} -- cat /data/pseudoDatabase.json > fetchedDatabase-test.json && tail fetchedDatabase-test.json"
alias incbot-test-db-backup-backup="rm -f fetchedDatabase-test-backup.json; kubectl get pods --namespace incident-response-bot-test | sed -ne 's/\(incident-response-bot-[0-9a-zA-Z-]*\).*/\1/p' | xargs -I{} kubectl exec -n incident-response-bot-test {} -- cat /data/pseudoDatabase_backup.json > fetchedDatabase-test-backup.json && tail fetchedDatabase-test-backup.json"
alias incbot-logs="kubectl get pods --namespace incident-response-bot | sed -ne 's/\(incident-response-bot-[0-9a-zA-Z-]*\).*/\1/p' | xargs -I{} kubectl logs {} -n incident-response-bot -c incident-response-bot -f"
alias incbot-test-logs="kubectl get pods --namespace incident-response-bot-test | sed -ne 's/\(incident-response-bot-[0-9a-zA-Z-]*\).*/\1/p' | xargs -I{} kubectl logs {} -n incident-response-bot-test -c incident-response-bot -f"
alias spur-bot-logs="kubectl --namespace spur-bot logs -l app=spur-bot --tail=10000 -f"
alias spur-bot-stage-logs="kubectl --namespace spur-bot-stage logs -l app=spur-bot --tail=10000 -f"
# alias spur-bot-stage-logs="kubectl get pods --namespace spur-bot-stage | sed -ne 's/\(spur-bot-[0-9a-zA-Z-]*\).*/\1/p' | xargs -I{} kubectl logs {} -n spur-bot-stage -c spur-bot -f"